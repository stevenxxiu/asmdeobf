# Analysis
For simplicity of analysis, we suppose the program does not modify itself. This is clearly untrue by looking at the first block, but as long as the self-modifications are fixed, analyzing the program as if it were not appears to work regardless, due to radare emulator doing memory writes to the code as we go.

To extract a CFG, we identify conditional branches and go through the program via DFS. Conditional branches that are taken for certain (jz when zf == 0) are ignored, as the other dest can be invalid code. Additionally, calls also split a block in two to facilitate block-by-block deobfuscation.

De-obfuscation is done on the CFG, as well as block-by-block.

## Other tools
Radeco only works on linux and is not aimed particularly at de-obfuscation. For convenience of python we code own ssa form/simplification routines.
